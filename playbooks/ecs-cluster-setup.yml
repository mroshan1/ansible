---
- hosts: localhost
  connection: local
  vars:
    region: 'us-east-X'
    dev_env: dev
    dev_vpc_id: 'vpc-XXXXXX6X'
    dev_ami_template: 'ami-XXXXXXXX'
    app_name: 'XXXXX'
    app_subnets: [ 'subnet-XXXXXXXX', 'subnet-XXXXXXXX' ]
    dev_tools_cidr: '10.0.0.0/24'


  tasks:

    - name: Create cluster
      ecs_cluster:
        name: ecs-cluster-dev-{{ app_name }}-{{ dev_env }}
        state: present
        region: us-east-X

    - name: ecr-repo
      ecs_ecr:
        name: ecs-repo-dev-{{ app_name }}-{{ dev_env }}
        state: present

    - name: Create ecs ec2 role
      iam_role:
        name: role-ecs-cluster-dev-{{ app_name }}-{{ dev_env }}
        state: present
        managed_policy:
          - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role'
          - arn:aws:iam:::policy/dev_iam_pol_ecs-dd-agent_{{ dev_env }}
        assume_role_policy_document: "{{ lookup('file', '../resources/dev-ecs-cluster-role-policy.json') }}"


    - name: Create ECS EC2 security group
      ec2_group:
        name: secgroup-asg-ecs-cluster-{{ app_name }}-{{ dev_env }}
        region: us-east-X
        description: 'secgroup-asg-ecs-cluster-{{ app_name }}-{{ dev_env }}'
        vpc_id: '{{ dev_vpc_id }}'
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: '{{ dev_tools_cidr }}'
        rules_egress:
          - proto: all
            from_port: all
            to_port: all
            cidr_ip: 0.0.0.0/0
      register: asg_ecs_cluster_secgroup

    - name: Remove the local jar file
      local_action: file dest='/tmp/asg-ecs-cluster-dev-{{ app_name }}-{{ dev_env }}-userdata.sh' state=absent
      sudo: False

    - name: Userdata template
      template:
        src: ../templates/dev-asg-ecs-cluster-dev-userdata.sh.j2
        dest: /tmp/asg-ecs-cluster-dev-{{ app_name }}-{{ dev_env }}-userdata.sh

    - name: Setup LaunchConfiguration
      ec2_lc:
        name: launchConfig-asg-ecs-cluster-dev-{{ app_name }}-{{ dev_env }}
        region: us-east-X
        image_id: '{{ dev_ami_template }}'
        instance_type: c4.2xlarge
        instance_monitoring: true
        key_name: dev-{{ dev_env }}-uswest
        security_groups: '{{ asg_ecs_cluster_secgroup.group_id }}'
        instance_profile_name: 'arn:aws:iam:::instance-profile/role-ecs-cluster-dev-{{ app_name }}-{{ dev_env }}'
        user_data_path: '/tmp/asg-ecs-cluster-dev-{{ app_name }}-{{ dev_env }}-userdata.sh'
        volumes:
          - device_name: /dev/sda1
            volume_size: 20
            device_type: gp2
            delete_on_termination: true
          - device_name: /dev/xvdcz
            volume_size: 100
            device_type: gp2
            delete_on_termination: true

    - name: Setup the Autoscaling group
      ec2_asg:
        name: asg-ecs-dev-cluster-{{ app_name }}-{{ dev_env }}
        region: us-east-X
        launch_config_name: launchConfig-asg-ecs-cluster-dev-{{ app_name }}-{{ dev_env }}
        vpc_zone_identifier: '{{ app_subnets }}'
        health_check_period: 60
        health_check_type: EC2
        min_size: 2
        max_size: 10
        desired_capacity: 2
        notification_topic: 'arn:aws:sns:us-east-X::topic-asg-esc-cluster'
        tags:
          - dev_environment: '{{ dev_env }}'
          - Name: 'ecs-cluster-dev-{{ app_name }}-{{ dev_env }}'
      register: asg_result

    - name: Configure Scaling Policies
      ec2_scaling_policy:
        region: "{{ region }}"
        name: "{{ item.name }}"
        asg_name: "{{ asg_result.name }}"
        state: present
        adjustment_type: "{{ item.adjustment_type }}"
        min_adjustment_step: "{{ item.min_adjustment_step }}"
        scaling_adjustment: "{{ item.scaling_adjustment }}"
        cooldown: "{{ item.cooldown }}"
      with_items:
        - name: "Increase Group Size"
          adjustment_type: "ChangeInCapacity"
          scaling_adjustment: +1
          min_adjustment_step: 1
          cooldown: 300
        - name: "Decrease Group Size"
          adjustment_type: "ChangeInCapacity"
          scaling_adjustment: -1
          min_adjustment_step: 1
          cooldown: 300
      register: sp_result

    - name: Configure Metric Alarms and link to Scaling Policies
      ec2_metric_alarm:
        region: "{{ region }}"
        name: "{{ item.name }}"
        state: present
        metric: "CPUReservation"
        namespace: "AWS/ECS"
        statistic: "Average"
        comparison: '{{ item.comparison }}'
        threshold: "{{ item.threshold }}"
        period: 300
        evaluation_periods: 2
        unit: "Percent"
        dimensions:
          ClusterName: ecs-cluster-dev-{{ app_name }}-{{ dev_env }}
        alarm_actions: "{{ item.alarm_actions }}"
      with_items:
        - name: "{{ asg_result.name }}-CPUReservation-Above75"
          comparison: ">="
          threshold: 75
          alarm_actions:
            - "{{ sp_result.results[0].arn }}"
        - name: "{{ asg_result.name }}-CPUReservation-Below20"
          comparison: "<="
          threshold: 20
          alarm_actions:
            - "{{ sp_result.results[1].arn }}"
      when: "{{ asg_result.max_size }} > 1"
      register: ma_result
